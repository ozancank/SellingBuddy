@if (isLoggedIn)
{
    <a href="basket" class="ml-md-auto">@identityService.GetUserName() - Basket (@basketItemCount)</a>
    <a class="ml-md-auto" @onclick=@GoLogoutPage>Logout</a>
}
else
{
    <a class="ml-md-auto" @onclick=@GoLoginPage>Login</a>
}

@code {
    [Inject]
    IBasketService basketService { get; set; }

    [Inject]
    IIdentityService identityService{ get; set; }

    [Inject]
    AppState appState { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    private int basketItemCount = 0;    

    bool isLoggedIn=false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            appState.StateChanged += async (source, property) => await AppState_StateChanged(source, property);
    }

    protected override Task OnInitializedAsync()
    {
        isLoggedIn = identityService.IsLoggedIn;

        return base.OnInitializedAsync();
    }

    private void GoLoginPage()
    {
        navigationManager.NavigateTo($"login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}", true);
    }

    private void GoLogoutPage()
    {
        navigationManager.NavigateTo($"logout?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}", true);
    }
}
